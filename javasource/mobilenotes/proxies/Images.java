// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package mobilenotes.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class Images extends system.proxies.Image
{
	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "MobileNotes.Images";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		PublicThumbnailPath("PublicThumbnailPath"),
		FileID("FileID"),
		Name("Name"),
		DeleteAfterDownload("DeleteAfterDownload"),
		Contents("Contents"),
		HasContents("HasContents"),
		Images_Notes("MobileNotes.Images_Notes");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public Images(IContext context)
	{
		this(context, Core.instantiate(context, "MobileNotes.Images"));
	}

	protected Images(IContext context, IMendixObject imagesMendixObject)
	{
		super(context, imagesMendixObject);
		if (!Core.isSubClassOf("MobileNotes.Images", imagesMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a MobileNotes.Images");
	}

	/**
	 * @deprecated Use 'Images.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static mobilenotes.proxies.Images initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return mobilenotes.proxies.Images.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static mobilenotes.proxies.Images initialize(IContext context, IMendixObject mendixObject)
	{
		return new mobilenotes.proxies.Images(context, mendixObject);
	}

	public static mobilenotes.proxies.Images load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return mobilenotes.proxies.Images.initialize(context, mendixObject);
	}

	public static java.util.List<mobilenotes.proxies.Images> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<mobilenotes.proxies.Images> result = new java.util.ArrayList<mobilenotes.proxies.Images>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//MobileNotes.Images" + xpathConstraint))
			result.add(mobilenotes.proxies.Images.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of Images_Notes
	 */
	public final mobilenotes.proxies.Notes getImages_Notes() throws CoreException
	{
		return getImages_Notes(getContext());
	}

	/**
	 * @param context
	 * @return value of Images_Notes
	 */
	public final mobilenotes.proxies.Notes getImages_Notes(IContext context) throws CoreException
	{
		mobilenotes.proxies.Notes result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Images_Notes.toString());
		if (identifier != null)
			result = mobilenotes.proxies.Notes.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Images_Notes
	 * @param images_notes
	 */
	public final void setImages_Notes(mobilenotes.proxies.Notes images_notes)
	{
		setImages_Notes(getContext(), images_notes);
	}

	/**
	 * Set value of Images_Notes
	 * @param context
	 * @param images_notes
	 */
	public final void setImages_Notes(IContext context, mobilenotes.proxies.Notes images_notes)
	{
		if (images_notes == null)
			getMendixObject().setValue(context, MemberNames.Images_Notes.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Images_Notes.toString(), images_notes.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final mobilenotes.proxies.Images that = (mobilenotes.proxies.Images) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "MobileNotes.Images";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
